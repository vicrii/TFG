import React, { useState, useEffect } from 'react';
import { Container, Form, Button, Card, Spinner, Alert, Row, Col } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
// Update import to use courseService from the course folder
import { courseService, ICourseData } from '../../services/course/courseService';
// ** 1. Import useWallet hook **
import { useWallet } from '@solana/wallet-adapter-react';

// Define the shape of data needed for creation (omit fields generated by backend)
type CourseCreationData = Omit<ICourseData, '_id' | 'createdAt' | 'published' | 'instructor'> & {
    content: string; // Add content field
};

// ** 2. Define UserData interface (can be imported if shared) **
interface UserData {
    _id: string; // Assuming backend returns _id
    walletAddress: string;
    displayName?: string;
    email?: string;
    bio?: string;
    role: string; // Use string for simplicity or enum 'student' | 'instructor' | etc.
}

const CreateCoursePage: React.FC = () => {
    // ** 3. Use useWallet **
    const { publicKey, connected } = useWallet();
    const navigate = useNavigate();
    const [courseData, setCourseData] = useState<Partial<CourseCreationData>>({
        title: '',
        description: '',
        price: 0,
        level: 'beginner', // Default level
        tags: [],
        imageUrl: '',
        content: 'Contenido pendiente', // Add default content
        updatedAt: new Date().toISOString() // Add updatedAt field
    });
    const [tagsInput, setTagsInput] = useState<string>(''); // Temp state for comma-separated tags
    const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
    const [formError, setFormError] = useState<string | null>(null);
    const [formSuccess, setFormSuccess] = useState<string | null>(null);

    // --- States for fetching user data and authorization ---
    const [userData, setUserData] = useState<UserData | null>(null);
    const [authLoading, setAuthLoading] = useState<boolean>(true);
    const [authError, setAuthError] = useState<string | null>(null);
    const [isAuthorized, setIsAuthorized] = useState<boolean>(false);

    // ** 4. useEffect to fetch UserData based on wallet connection **
    useEffect(() => {
        // Reset state if wallet disconnects
        if (!connected || !publicKey) {
            setUserData(null);
            setIsAuthorized(false);
            setAuthLoading(false);
            setAuthError(null); // Clear any previous auth error
            return;
        }

        const fetchUserDataAndAuthorize = async () => {
            setAuthLoading(true);
            setAuthError(null);
            setIsAuthorized(false); // Assume not authorized until verified
            console.log(`[CreateCoursePage] Wallet connected: ${publicKey.toBase58()}. Fetching user data...`);

            try {
                const response = await fetch(`http://localhost:5000/api/users/${publicKey.toBase58()}`);
                if (!response.ok) {
                    if (response.status === 404) {
                        setAuthError("Tu perfil no se encontró en la base de datos.");
                    } else {
                         const errData = await response.json().catch(() => ({})); // Try get error message
                         setAuthError(errData.message || `Error ${response.status} al verificar usuario.`);
                    }
                    setUserData(null);
                } else {
                    const data: UserData = await response.json();
                    setUserData(data);
                    console.log('[CreateCoursePage] User data received:', data);
                    // Check role for authorization
                    if (data && ['moderator', 'instructor'].includes(data.role)) {
                        console.log('[CreateCoursePage] Authorization SUCCESS.');
                        setIsAuthorized(true);
                    } else {
                         console.log('[CreateCoursePage] Authorization FAILED (Role mismatch).');
                        setAuthError("No tienes el rol requerido (moderador o instructor).");
                    }
                }
            } catch (err) {
                console.error("Error fetching user data for auth:", err);
                setAuthError("Error de conexión al verificar permisos.");
                setUserData(null);
            } finally {
                setAuthLoading(false);
            }
        };

        fetchUserDataAndAuthorize();
    }, [connected, publicKey]); // Re-run if connection or public key changes

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setCourseData(prev => ({ ...prev, [name]: value }));
    };

    const handleTagsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setTagsInput(e.target.value);
        // Update the actual tags array by splitting the comma-separated string
        setCourseData(prev => ({
            ...prev,
            tags: e.target.value.split(',').map(tag => tag.trim()).filter(Boolean) // Split, trim, remove empty
        }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        // Check authorization again just before submitting
        if (!isAuthorized || !userData) {
            setFormError("No autorizado para crear cursos.");
            return;
        }

        setIsSubmitting(true); // Use submitting state for the form button
        setFormError(null);
        setFormSuccess(null);

        if (!courseData.title || !courseData.description) {
            setFormError('El título y la descripción son obligatorios.');
            setIsSubmitting(false);
            return;
        }

        const finalCourseData: CourseCreationData = {
            title: courseData.title!,
            description: courseData.description!,
            price: Number(courseData.price) || 0,
            level: courseData.level || 'beginner',
            tags: courseData.tags || [],
            imageUrl: courseData.imageUrl || undefined,
            content: courseData.content || 'Contenido pendiente',
            updatedAt: new Date().toISOString() // Add updatedAt with current time
        };

        try {
            console.log('[CreateCoursePage] Calling createCourse with data:', finalCourseData);
            // Use courseService.createCourse
            const newCourse = await courseService.createCourse(finalCourseData, userData.walletAddress);

            setFormSuccess(`Curso "${newCourse.title}" creado con éxito!`);
            setTimeout(() => {
                navigate(`/courses/${newCourse._id}`, { state: { showAddLessonMsg: true } });
            }, 2000);
            setCourseData({ title: '', description: '', price: 0, level: 'beginner', tags: [], imageUrl: '', content: 'Contenido pendiente', updatedAt: new Date().toISOString() });
            setTagsInput('');
        } catch (err) {
            console.error("Error creating course:", err);
            setFormError((err as Error).message || 'Error al crear el curso.');
        } finally {
            setIsSubmitting(false); // Use submitting state
        }
    };

    // --- Render Loading/Denied/Form logic ---
    if (authLoading) {
        return <Container className="mt-4 text-center"><p>Verificando permisos...</p><Spinner animation="border" /></Container>;
    }

    // If not connected show connect button
    if (!connected) {
         return (
            <Container className="mt-4 text-center">
                <Alert variant="warning">Por favor, conecta tu wallet para crear un curso.</Alert>
                {/* Optionally add WalletMultiButton here */}
            </Container>
         );
    }

    // If connected but not authorized (or error during auth check)
    if (!isAuthorized) {
        return (
            <Container className="mt-4">
                <Alert variant="danger">
                    <Alert.Heading>Acceso Denegado</Alert.Heading>
                    <p>{authError || "No tienes los permisos necesarios (moderador o instructor) para acceder a esta página."}</p>
                    <Button variant="secondary" onClick={() => navigate('/')}>Ir al Inicio</Button>
                </Alert>
            </Container>
        );
    }

    return (
        <Container className="mt-4 mb-5">
            <Card>
                <Card.Header as="h2">Añadir Nuevo Curso</Card.Header>
                <Card.Body>
                    <Form onSubmit={handleSubmit}>
                        <Form.Group className="mb-3" controlId="courseTitle">
                            <Form.Label>Título del Curso</Form.Label>
                            <Form.Control type="text" name="title" value={courseData.title || ''} onChange={handleChange} required />
                        </Form.Group>
                        <Form.Group className="mb-3" controlId="courseDescription">
                            <Form.Label>Descripción</Form.Label>
                            <Form.Control as="textarea" rows={3} name="description" value={courseData.description || ''} onChange={handleChange} required />
                        </Form.Group>
                         <Row>
                            <Col md={6}>
                                <Form.Group className="mb-3" controlId="coursePrice">
                                    <Form.Label>Precio (SOL)</Form.Label>
                                    <Form.Control type="number" name="price" value={courseData.price ?? 0} onChange={handleChange} min="0" step="0.01"/>
                                </Form.Group>
                            </Col>
                            <Col md={6}>
                                <Form.Group className="mb-3" controlId="courseLevel">
                                    <Form.Label>Nivel</Form.Label>
                                    <Form.Select name="level" value={courseData.level || 'beginner'} onChange={handleChange} >
                                        <option value="beginner">Principiante</option>
                                        <option value="intermediate">Intermedio</option>
                                        <option value="advanced">Avanzado</option>
                                    </Form.Select>
                                </Form.Group>
                            </Col>
                        </Row>
                         <Form.Group className="mb-3" controlId="courseTags">
                            <Form.Label>Etiquetas (separadas por comas)</Form.Label>
                            <Form.Control type="text" name="tags" value={tagsInput} onChange={handleTagsChange} />
                        </Form.Group>
                         <Form.Group className="mb-3" controlId="courseImageUrl">
                            <Form.Label>URL de la Imagen (Opcional)</Form.Label>
                            <Form.Control type="text" name="imageUrl" value={courseData.imageUrl || ''} onChange={handleChange} />
                        </Form.Group>

                        {formError && <Alert variant="danger">{formError}</Alert>}
                        {formSuccess && <Alert variant="success">{formSuccess}</Alert>}

                        <Button variant="primary" type="submit" disabled={isSubmitting}>
                            {isSubmitting ? <Spinner as="span" animation="border" size="sm" /> : 'Crear Curso'}
                        </Button>
                    </Form>
                </Card.Body>
            </Card>
        </Container>
    );
};

export default CreateCoursePage;

// **Remember to define this type based on ICourseData if not already globally available**
type CourseCreationPayload = Omit<ICourseData, '_id' | 'createdAt' | 'published' | 'instructor'>;